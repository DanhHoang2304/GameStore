@page "/editgame"
@page "/editgame/{id:int}"

@inject NavigationManager NavigationManager
@inject GameClient GamesClient
@inject GenresClient GenresClient


<PageTitle>New Game Adding</PageTitle>
<h3 class="mt-4">New Game</h3>
@if (genres is null || game is null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="row" >
    <div class="col-md-6"> 
      <EditForm Model="@game" FormName="editgame" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
          <label for="name" class="form-label">Name</label>
          <InputText id ="name" @bind-Value="game.Name" class="form-control"/>
          <ValidationMessage For="() => game.Name"/>
        </div>
        <div class="mb-3">
          <label for="genre" class="form-label">Genre</label>
          <InputSelect id ="genre" @bind-Value="game.GenreId" class="form-select">
            <option value="">Select a genre</option>
            @foreach(var genre in genres)
            {
              <option value="@genre.Id">@genre.Name</option>  
            }
          </InputSelect>
          <ValidationMessage For="() => game.GenreId"/>
        </div>
        <div class="mb-3">
          <label for="price" class="form-label">price</label>
          <InputNumber id ="price" @bind-Value="game.Price" class="form-control"/>
          <ValidationMessage For="() => game.Price"/>
        </div>
        <div class="mb-3">
          <label for="releaseDate" class="form-label">Release Date</label>
          <InputDate id ="releaseDate" @bind-Value="game.ReleaseDate" class="form-control"/>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
        <a role="button" class="btn btn-secondary" href="/" >Cancel</a>
      </EditForm>
    </div>
  </div>
}

@code {

    [Parameter]
    public int? Id {get; set;}


    [SupplyParameterFromForm]
    private GameDetails? game {get; set;}

    private Genre[]? genres;

    protected override void OnParametersSet()
    {
      
      if (game is not null)
      {
        return;
      }

      if (Id is not null)
      {
        game = GamesClient.GetGame(Id.Value);
      }
      else
      {
        game = new()
        {
          Name = string.Empty,
          ReleaseDate = DateOnly.FromDateTime(DateTime.UtcNow) 
        };
      }
    }

    protected override void OnInitialized()
    {
      genres = GenresClient.GetGenres();
    }

    private void HandleSubmit()
    {
      ArgumentNullException.ThrowIfNull(game);// throw if game is null
      GamesClient.AddGame(game);
      NavigationManager.NavigateTo("/");
    } 
}
